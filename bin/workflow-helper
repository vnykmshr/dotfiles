#!/usr/bin/env bash

# Workflow Helper - Automate common development workflows
# Based on vnykmshr's shell usage patterns

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging
log_info() { printf "${BLUE}ℹ %s${NC}\n" "$*" >&2; }
log_success() { printf "${GREEN}✓ %s${NC}\n" "$*" >&2; }
log_warn() { printf "${YELLOW}⚠ %s${NC}\n" "$*" >&2; }
log_error() { printf "${RED}✗ %s${NC}\n" "$*" >&2; }

# Usage
usage() {
    cat << EOF
Workflow Helper - Based on your shell usage patterns

USAGE:
    workflow-helper <command> [options]

COMMANDS:
    commit [message]     # Quick commit workflow (your gst + git add -u + git commit pattern)
    deploy              # Build and deploy workflow (make build + environment setup)
    status              # Enhanced status (git + project info)
    setup               # Project setup (npm install, go mod tidy, etc.)
    clean               # Clean workspace (git clean, make clean, etc.)
    sync                # Sync workflow (git pull + setup + build)

EXAMPLES:
    workflow-helper commit "fix bug"    # Quick commit
    workflow-helper deploy              # Build and deploy
    workflow-helper status              # Project status
    workflow-helper sync                # Full sync workflow

EOF
}

# Detect project type
detect_project_type() {
    if [[ -f "go.mod" ]]; then
        echo "go"
    elif [[ -f "package.json" ]]; then
        echo "node"
    elif [[ -f "pubspec.yaml" ]]; then
        echo "flutter"
    elif [[ -f "Makefile" ]]; then
        echo "make"
    else
        echo "unknown"
    fi
}

# Quick commit workflow (your most common pattern)
cmd_commit() {
    local message="$*"

    log_info "Running commit workflow..."

    # Check if we're in a git repo
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log_error "Not a git repository"
        return 1
    fi

    # Show status first (like your gst usage)
    log_info "Current status:"
    git status --short --branch

    # Add all modified files (your git add -u pattern)
    log_info "Staging changes..."
    git add -u

    # Check if there are changes to commit
    if git diff --cached --quiet; then
        log_warn "No changes to commit"
        return 0
    fi

    # Commit with message
    if [[ -n "$message" ]]; then
        git commit -m "$message"
        log_success "Committed: $message"
    else
        # Auto-generate message from changed files
        local changed_files=$(git diff --cached --name-only | head -3 | tr '\n' ' ')
        local auto_message="update: $changed_files"
        git commit -m "$auto_message"
        log_success "Auto-committed: $auto_message"
    fi

    # Ask if user wants to push (common in your workflow)
    echo -n "Push to remote? (y/N): "
    read -r push_answer
    if [[ "$push_answer" =~ ^[Yy]$ ]]; then
        git push
        log_success "Pushed to remote"
    fi
}

# Deploy workflow (based on your make build + environment patterns)
cmd_deploy() {
    log_info "Running deploy workflow..."

    local project_type=$(detect_project_type)

    case "$project_type" in
        make)
            if grep -q "build" Makefile; then
                log_info "Building project..."
                make build

                # Check for common build artifacts
                if [[ -f "./build/markgo" ]]; then
                    log_info "Starting production server..."
                    ENVIRONMENT=production GIN_MODE=release ./build/markgo
                else
                    log_warn "Build artifact not found, running make run..."
                    make run
                fi
            else
                make
            fi
            ;;
        go)
            log_info "Building Go project..."
            go build .
            log_info "Running in production mode..."
            ENVIRONMENT=production ./"$(basename "$(pwd)")"
            ;;
        node)
            log_info "Building Node.js project..."
            if npm run build >/dev/null 2>&1; then
                NODE_ENV=production npm start
            else
                NODE_ENV=production node app.js
            fi
            ;;
        flutter)
            log_info "Building Flutter project..."
            flutter build
            ;;
        *)
            log_error "Unknown project type, cannot deploy"
            return 1
            ;;
    esac
}

# Enhanced status (your gst usage pattern)
cmd_status() {
    log_info "Project Status Overview"

    # Git status (your most used command)
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo -e "\n${BLUE}Git Status:${NC}"
        git status --short --branch

        echo -e "\n${BLUE}Recent Commits:${NC}"
        git log --oneline --graph --decorate -5
    else
        log_warn "Not a git repository"
    fi

    # Project info
    echo -e "\n${BLUE}Project Info:${NC}"
    echo "Directory: $(pwd)"
    echo "Files: $(find . -maxdepth 1 -type f | wc -l | tr -d ' ')"

    local project_type=$(detect_project_type)
    case "$project_type" in
        go)
            echo "Type: Go project"
            if command -v go >/dev/null; then
                echo "Go version: $(go version | cut -d' ' -f3)"
            fi
            ;;
        node)
            echo "Type: Node.js project"
            if command -v node >/dev/null; then
                echo "Node version: $(node --version)"
            fi
            if [[ -f "package.json" ]]; then
                echo "Package name: $(jq -r '.name // "unknown"' package.json 2>/dev/null || echo "unknown")"
            fi
            ;;
        flutter)
            echo "Type: Flutter project"
            if command -v flutter >/dev/null; then
                echo "Flutter version: $(flutter --version | head -1 | cut -d' ' -f2)"
            fi
            ;;
        make)
            echo "Type: Makefile project"
            if [[ -f "Makefile" ]]; then
                echo "Available targets: $(grep '^[a-zA-Z]' Makefile | cut -d':' -f1 | tr '\n' ' ')"
            fi
            ;;
    esac
}

# Project setup (based on your npm install, go mod tidy patterns)
cmd_setup() {
    log_info "Setting up project dependencies..."

    local project_type=$(detect_project_type)

    case "$project_type" in
        go)
            log_info "Running go mod tidy..."
            go mod tidy
            log_info "Downloading dependencies..."
            go mod download
            ;;
        node)
            log_info "Running npm install..."
            npm install

            # Run audit if you have it (you use npm audit fix often)
            if npm audit >/dev/null 2>&1; then
                log_info "Running npm audit..."
                npm audit --audit-level moderate
            fi
            ;;
        flutter)
            log_info "Running flutter pub get..."
            flutter pub get
            ;;
        make)
            if grep -q "setup\|install" Makefile; then
                log_info "Running make setup/install..."
                make setup 2>/dev/null || make install 2>/dev/null || true
            fi
            ;;
    esac

    log_success "Project setup complete"
}

# Clean workspace
cmd_clean() {
    log_info "Cleaning workspace..."

    # Git clean
    if git rev-parse --git-dir >/dev/null 2>&1; then
        log_info "Cleaning git working directory..."
        git clean -fd
    fi

    local project_type=$(detect_project_type)

    case "$project_type" in
        go)
            log_info "Cleaning Go cache..."
            go clean -cache -modcache -i -r
            ;;
        node)
            log_info "Cleaning node_modules..."
            rm -rf node_modules
            rm -rf package-lock.json
            ;;
        flutter)
            log_info "Running flutter clean..."
            flutter clean
            ;;
        make)
            if grep -q "clean" Makefile; then
                log_info "Running make clean..."
                make clean
            fi
            ;;
    esac

    log_success "Workspace cleaned"
}

# Sync workflow (pull + setup + build)
cmd_sync() {
    log_info "Running sync workflow..."

    # Git pull
    if git rev-parse --git-dir >/dev/null 2>&1; then
        log_info "Pulling latest changes..."
        git pull
    fi

    # Setup dependencies
    cmd_setup

    # Build if possible
    local project_type=$(detect_project_type)
    case "$project_type" in
        make)
            if grep -q "build" Makefile; then
                log_info "Building project..."
                make build
            fi
            ;;
        go)
            log_info "Building Go project..."
            go build .
            ;;
        node)
            if npm run build >/dev/null 2>&1; then
                log_info "Building Node.js project..."
                npm run build
            fi
            ;;
    esac

    log_success "Sync complete"
}

# Main command dispatcher
main() {
    local command="${1:-help}"
    shift || true

    case "$command" in
        commit|c)
            cmd_commit "$@"
            ;;
        deploy|d)
            cmd_deploy "$@"
            ;;
        status|s)
            cmd_status "$@"
            ;;
        setup)
            cmd_setup "$@"
            ;;
        clean)
            cmd_clean "$@"
            ;;
        sync)
            cmd_sync "$@"
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            log_error "Unknown command: $command"
            echo
            usage
            exit 1
            ;;
    esac
}

main "$@"