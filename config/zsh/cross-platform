# Cross-platform compatibility configuration
# Cross-Platform Compatibility

# =============================================================================
# Platform Detection
# =============================================================================

# Detect platform and environment
detect_platform() {
    # OS Detection
    case "$OSTYPE" in
        darwin*) export DOTFILES_OS="macos" ;;
        linux*) export DOTFILES_OS="linux" ;;
        *) export DOTFILES_OS="unknown" ;;
    esac

    # Environment Detection
    export DOTFILES_ENV="native"
    [[ -n "$WSL_DISTRO_NAME" || -n "$WSL_INTEROP" ]] && export DOTFILES_ENV="wsl"
    [[ -f "/.dockerenv" || -n "$CONTAINER" ]] && export DOTFILES_ENV="container"
    [[ -n "$CODESPACES" ]] && export DOTFILES_ENV="codespaces"
    [[ -n "$GITPOD_WORKSPACE_ID" ]] && export DOTFILES_ENV="gitpod"
}

# =============================================================================
# Platform Configurations
# =============================================================================

# Setup clipboard commands
setup_clipboard() {
    case "$DOTFILES_OS" in
        macos)
            alias pbcopy='pbcopy'
            alias pbpaste='pbpaste'
            ;;
        linux)
            if command -v xclip >/dev/null 2>&1; then
                alias pbcopy='xclip -selection clipboard'
                alias pbpaste='xclip -selection clipboard -o'
            elif [[ "$DOTFILES_ENV" == "wsl" ]]; then
                alias pbcopy='clip.exe'
                alias pbpaste='powershell.exe -command "Get-Clipboard"'
            fi
            ;;
    esac
}

# Setup open command
setup_open_command() {
    case "$DOTFILES_OS" in
        macos) alias open='open' ;;
        linux)
            if command -v xdg-open >/dev/null 2>&1; then
                alias open='xdg-open'
            elif [[ "$DOTFILES_ENV" == "wsl" ]]; then
                alias open='explorer.exe'
            fi
            ;;
    esac
}

# Platform-specific PATH
setup_platform_paths() {
    case "$DOTFILES_OS" in
        macos)
            [[ -d "/opt/homebrew/bin" ]] && export PATH="/opt/homebrew/bin:$PATH"
            [[ -d "/opt/homebrew/sbin" ]] && export PATH="/opt/homebrew/sbin:$PATH"
            ;;
        linux)
            [[ -d "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"
            if [[ "$DOTFILES_ENV" == "wsl" ]]; then
                # Clean Windows paths that cause issues
                export PATH=$(echo "$PATH" | tr ':' '\n' | grep -v "/mnt/c" | tr '\n' ':' | sed 's/:$//')
            fi
            ;;
    esac
}

# =============================================================================
# Unified Keybindings
# =============================================================================

setup_unified_keybindings() {
    # Word movement
    case "$DOTFILES_OS" in
        macos)
            bindkey '^[[1;3D' backward-word      # Alt+Left
            bindkey '^[[1;3C' forward-word       # Alt+Right
            ;;
        *)
            bindkey '^[[1;5D' backward-word      # Ctrl+Left
            bindkey '^[[1;5C' forward-word       # Ctrl+Right
            ;;
    esac

    # Standard line editing
    bindkey '^A' beginning-of-line
    bindkey '^E' end-of-line
    bindkey '^K' kill-line
    bindkey '^U' backward-kill-line
    bindkey '^W' backward-kill-word
}

# =============================================================================
# Environment Optimizations
# =============================================================================

# Container optimizations
optimize_for_containers() {
    [[ "$DOTFILES_ENV" != "container" ]] && return
    export DISABLE_AUTO_UPDATE="true"
    export CONTAINER_MODE="true"
}

# WSL optimizations
optimize_for_wsl() {
    [[ "$DOTFILES_ENV" != "wsl" ]] && return
    export NPM_CONFIG_CACHE="$HOME/.npm"
    alias cmd='cmd.exe'
    alias powershell='powershell.exe'
    alias explorer='explorer.exe'
}

# Cloud IDE optimizations
optimize_for_cloud() {
    [[ "$DOTFILES_ENV" != "codespaces" && "$DOTFILES_ENV" != "gitpod" ]] && return
    export DISABLE_AUTO_TITLE="true"
    export CLOUD_MODE="true"
}

# =============================================================================
# Commands and Setup
# =============================================================================

# Show environment info
env_info() {
    echo "Environment: $DOTFILES_OS ($DOTFILES_ENV)"
    [[ "$DOTFILES_ENV" == "wsl" ]] && echo "WSL Distro: ${WSL_DISTRO_NAME:-unknown}"
}

# envinfo function defined in environment-detection file
alias platform='echo "$DOTFILES_OS ($DOTFILES_ENV)"'

# Initialize all cross-platform features
init_cross_platform() {
    detect_platform
    setup_clipboard
    setup_open_command
    setup_platform_paths
    setup_unified_keybindings
    optimize_for_containers
    optimize_for_wsl
    optimize_for_cloud
}

# Auto-initialize
init_cross_platform
