# Direnv Integration - Clean Version

# Initialize direnv if available
command -v direnv >/dev/null 2>&1 && eval "$(direnv hook zsh)" && export DIRENV_LOG_FORMAT=""

# Smart .envrc creation
create_envrc() {
    local type="${1:-generic}"
    [[ -f ".envrc" ]] && { read -p ".envrc exists. Overwrite? [y/N]: " -r; [[ ! $REPLY =~ ^[Yy]$ ]] && return 1; }

    case "$type" in
        node*)
            cat > .envrc <<'EOF'
[[ -f ".nvmrc" ]] && use node $(cat .nvmrc)
dotenv_if_exists .env .env.local .env.development
PATH_add node_modules/.bin
export NODE_ENV=development DEBUG=app:*
EOF
            ;;
        python|py)
            cat > .envrc <<'EOF'
[[ -f ".python-version" ]] && use python $(cat .python-version)
[[ -d "venv" ]] && source venv/bin/activate
[[ -d ".venv" ]] && source .venv/bin/activate
dotenv_if_exists .env .env.local
export PYTHONPATH="$(pwd):$PYTHONPATH" PYTHONDONTWRITEBYTECODE=1
EOF
            ;;
        go*)
            cat > .envrc <<'EOF'
[[ -z "$GOPATH" ]] && export GOPATH="$HOME/workspace/gocode"
PATH_add bin "$GOPATH/bin"
dotenv_if_exists .env .env.local
export GO111MODULE=on GOPROXY=https://proxy.golang.org,direct
EOF
            ;;
        rust|cargo)
            cat > .envrc <<'EOF'
PATH_add "$HOME/.cargo/bin" target/release target/debug
dotenv_if_exists .env .env.local
export RUST_BACKTRACE=1
EOF
            ;;
        docker)
            cat > .envrc <<'EOF'
dotenv_if_exists .env .env.local .env.development
export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
EOF
            ;;
        *)
            cat > .envrc <<'EOF'
dotenv_if_exists .env .env.local
PATH_add bin scripts
EOF
            ;;
    esac

    chmod +x .envrc
    command -v direnv >/dev/null 2>&1 && direnv allow .
    ! grep -q "^\.envrc$" .gitignore 2>/dev/null && echo ".envrc" >> .gitignore
}

# Auto-detect project type and create .envrc
smart_envrc() {
    local type="generic"
    [[ -f "package.json" ]] && type="node"
    [[ -f "requirements.txt" || -f "pyproject.toml" ]] && type="python"
    [[ -f "go.mod" ]] && type="go"
    [[ -f "Cargo.toml" ]] && type="rust"
    [[ -f "Dockerfile" ]] && type="docker"
    create_envrc "$type"
}

# Aliases
alias envrc='smart_envrc'
alias mkenvrc='create_envrc'
alias denv='direnv status'
alias deallow='direnv allow .'
