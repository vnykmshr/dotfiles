# Go Development Tools

# Environment setup
setup_go_env() {
    export GOPATH="$HOME/workspace/gocode"
    [[ -d "$GOPATH/bin" && ":$PATH:" != *":$GOPATH/bin:"* ]] && export PATH="$GOPATH/bin:$PATH"
    [[ -d "bin" && ":$PATH:" != *":$(pwd)/bin:"* ]] && export PATH="$(pwd)/bin:$PATH"
}

# Module management
goinit() { go mod init "${1:-$(basename $(pwd))}"; }
gotidy() { go mod tidy; }
goget() { go get "$@" && go mod tidy; }

# Testing and building
gowatch() {
    command -v entr >/dev/null || { echo "Install entr"; return 1; }
    find . -name "*.go" | entr -c go test ./...
}

gobuild-all() {
    local binary="${1:-$(basename $(pwd))}"
    mkdir -p bin
    GOOS=linux GOARCH=amd64 go build -o "bin/${binary}-linux" .
    GOOS=darwin GOARCH=amd64 go build -o "bin/${binary}-darwin" .
    GOOS=windows GOARCH=amd64 go build -o "bin/${binary}-windows.exe" .
}

# Project creation
gonew() {
    local project="$1"
    [[ -z "$project" ]] && { echo "Usage: gonew <project>"; return 1; }

    mkdir -p "$HOME/workspace/github/$project" && cd "$_"
    go mod init "github.com/vnykmshr/$project"
    echo 'package main\nimport "fmt"\nfunc main() { fmt.Println("Hello!") }' > main.go
    git init
}

# Navigation
cdgo() {
    local project="$1"
    if [[ -n "$project" ]]; then
        cd "$HOME/workspace/github/$project" 2>/dev/null || echo "Not found"
    else
        cd "$HOME/workspace/gocode"
    fi
}

# Environment info
goinfo() {
    command -v go >/dev/null && echo "$(go version)"
    echo "GOPATH: ${GOPATH:-not set}"
    [[ -f "go.mod" ]] && echo "Module: $(grep '^module ' go.mod | awk '{print $2}')"
}

# Auto-setup in Go projects
[[ -f "go.mod" ]] && setup_go_env
