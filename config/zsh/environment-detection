# Environment Detection

# Auto-activate project versions
activate_node() {
    [[ ! -f ".nvmrc" ]] && return
    local version=$(cat .nvmrc | tr -d '[:space:]')
    # Note: Node version management can be added here when needed
    # For now, just notify about the version file
    echo "Found .nvmrc with node@$version"
}

activate_python() {
    [[ ! -f ".python-version" ]] && return
    local version=$(cat .python-version | tr -d '[:space:]')
    # Note: Python version management can be added here when needed
    # For now, just notify about the version file
    echo "Found .python-version with python@$version"
}

# Load .env file
load_env() {
    [[ ! -f ".env" ]] && return
    while IFS= read -r line; do
        [[ "$line" =~ ^[[:space:]]*# || -z "${line// }" ]] && continue
        [[ "$line" =~ ^[a-zA-Z_][a-zA-Z0-9_]*= ]] && export "$line"
    done < .env
}

# Auto-detection on directory change
detect_env() {
    [[ -f ".nvmrc" ]] && activate_node
    [[ -f ".python-version" ]] && activate_python
    [[ -f ".env" ]] && load_env

    # Load dev automation for supported projects
    if [[ -f "go.mod" || -f "package.json" || -f "manage.py" || -f "Makefile" || -f "Cargo.toml" ]]; then
        [[ -f "$DOTFILES/config/zsh/dev-automation" ]] && source "$DOTFILES/config/zsh/dev-automation"
    fi
}

# Setup auto-detection
autoload -U add-zsh-hook
add-zsh-hook chpwd detect_env

# Commands
envup() { detect_env; }
envinfo() {
    [[ -f ".nvmrc" ]] && echo "Node: $(cat .nvmrc)"
    [[ -f ".python-version" ]] && echo "Python: $(cat .python-version)"
    [[ -f ".env" ]] && echo ".env loaded"
}

# Create version files
use_node() { echo "$1" > .nvmrc && activate_node; }
use_python() { echo "$1" > .python-version && activate_python; }
