# Environment Detection

# Auto-activate project versions
activate_node() {
    [[ ! -f ".nvmrc" ]] && return
    local version=$(cat .nvmrc | tr -d '[:space:]')

    if command -v mise >/dev/null 2>&1; then
        mise use node@"$version" 2>/dev/null && echo "Activated node@$version"
    fi
}

activate_python() {
    [[ ! -f ".python-version" ]] && return
    local version=$(cat .python-version | tr -d '[:space:]')

    if command -v mise >/dev/null 2>&1; then
        mise use python@"$version" 2>/dev/null && echo "Activated python@$version"
    fi
}

# Load .env file
load_env() {
    [[ ! -f ".env" ]] && return
    while IFS= read -r line; do
        [[ "$line" =~ ^[[:space:]]*# || -z "${line// }" ]] && continue
        [[ "$line" =~ ^[a-zA-Z_][a-zA-Z0-9_]*= ]] && export "$line"
    done < .env
}

# Auto-detection on directory change
auto_environment() {
    local current_dir="$(pwd)"
    [[ "$LAST_ENV_DIR" == "$current_dir" ]] && return

    activate_node
    activate_python
    load_env

    export LAST_ENV_DIR="$current_dir"
}

# Setup auto-detection
autoload -U add-zsh-hook
add-zsh-hook chpwd auto_environment

# Commands
envup() { unset LAST_ENV_DIR; auto_environment; }
envinfo() {
    [[ -f ".nvmrc" ]] && echo "Node: $(cat .nvmrc)"
    [[ -f ".python-version" ]] && echo "Python: $(cat .python-version)"
    [[ -f ".env" ]] && echo "Environment: .env loaded"
}

# Create version files
use_node() { echo "$1" > .nvmrc && activate_node; }
use_python() { echo "$1" > .python-version && activate_python; }
