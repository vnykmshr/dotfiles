# Development Automation
# Note: dev command provided by workflow/dev-server script

# Universal test runner
run_tests() {
    # Go projects
    if [[ -f "go.mod" ]]; then
        go test ./...
    # Node.js projects
    elif [[ -f "package.json" ]] && command -v jq >/dev/null && jq -e '.scripts.test' package.json >/dev/null 2>&1; then
        npm test
    # Python projects
    elif [[ -f "pyproject.toml" || -f "requirements.txt" || -f "setup.py" ]]; then
        command -v pytest >/dev/null && pytest || python -m unittest discover
    # Rust projects
    elif [[ -f "Cargo.toml" ]]; then
        cargo test
    # Makefile
    elif [[ -f "Makefile" ]] && grep -q "^test:" Makefile; then
        make test
    else
        echo "No test command found"; return 1
    fi
}

# Watch tests
testwatch() {
    command -v entr >/dev/null || { echo "Requires entr (brew install entr)"; return 1; }

    if [[ -f "go.mod" ]]; then
        find . -name "*.go" | entr -c go test ./...
    elif [[ -f "package.json" ]]; then
        find . -name "*.js" -o -name "*.ts" | entr -c npm test
    elif [[ -f "pyproject.toml" || -f "requirements.txt" || -f "setup.py" ]]; then
        find . -name "*.py" | entr -c pytest
    else
        echo "No watch support for this project"; return 1
    fi
}

# Simple project setup
project_setup() {
    echo "ðŸš€ Setting up project..."

    # Initialize git if not exists
    [[ ! -d .git ]] && git init

    # Create common directories
    mkdir -p {src,tests,docs}

    # Create README if not exists
    [[ ! -f README.md ]] && echo "# $(basename "$PWD")" > README.md

    # Create .gitignore if not exists
    if [[ ! -f .gitignore ]]; then
        if [[ -f "package.json" ]]; then
            echo "node_modules/\n.env\ndist/" > .gitignore
        elif [[ -f "go.mod" ]]; then
            echo "*.exe\n*.so\n.env" > .gitignore
        elif [[ -f "Cargo.toml" ]]; then
            echo "target/\n**/*.rs.bk\n.env" > .gitignore
        else
            echo ".env\n.DS_Store" > .gitignore
        fi
    fi

    echo "âœ… Project setup complete!"
}

# Alias for backwards compatibility
alias test='run_tests'
