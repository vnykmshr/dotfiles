# Modern Zsh Configuration - Clean Version

# Performance and debug mode
[[ "$ZSH_PROF" == "1" ]] && zmodload zsh/zprof
[[ "$DOTFILES_DEBUG" == "true" ]] && zmodload zsh/zprof

# Core configuration
export DOTFILES="${DOTFILES:-$HOME/.dotfiles}"

# Ensure .dotfiles symlink exists and points to the correct location
if [[ ! -L "$HOME/.dotfiles" ]]; then
    # Try to detect the actual dotfiles directory
    local actual_dotfiles_dir=""

    # Method 1: Check if we can determine location from this script's path
    if [[ -n "${(%):-%x}" ]]; then
        local script_dir="${${(%):-%x}:A:h:h:h}"  # Go up 3 levels from config/zsh/zshrc
        if [[ -f "$script_dir/install/setup.sh" && -d "$script_dir/config" ]]; then
            actual_dotfiles_dir="$script_dir"
        fi
    fi

    # Method 2: Check if we're currently in a dotfiles directory
    if [[ -z "$actual_dotfiles_dir" && -f "${PWD}/config/zsh/zshrc" && -f "${PWD}/install/setup.sh" ]]; then
        actual_dotfiles_dir="$PWD"
    fi

    # Method 3: Search for dotfiles directory in common locations
    if [[ -z "$actual_dotfiles_dir" ]]; then
        # Search in home directory and common workspace locations
        local search_paths=(
            "$HOME/dotfiles"
            "$HOME/.dotfiles-src"
            "$HOME/workspace/dotfiles"
            "$HOME/workspace/*/dotfiles"
            "$HOME/*/dotfiles"
            "$HOME/src/dotfiles"
            "$HOME/dev/dotfiles"
        )

        for pattern in "${search_paths[@]}"; do
            for possible_dir in $~pattern; do
                if [[ -d "$possible_dir" && -f "$possible_dir/install/setup.sh" && -d "$possible_dir/config" ]]; then
                    actual_dotfiles_dir="$possible_dir"
                    break 2
                fi
            done
        done
    fi

    # Create symlink if we found the directory
    if [[ -n "$actual_dotfiles_dir" && -d "$actual_dotfiles_dir" ]]; then
        # Remove existing file/directory if it exists but isn't a symlink
        [[ -e "$HOME/.dotfiles" && ! -L "$HOME/.dotfiles" ]] && rm -rf "$HOME/.dotfiles"

        # Create the symlink
        ln -sf "$actual_dotfiles_dir" "$HOME/.dotfiles"

        # Update DOTFILES to use the symlink
        export DOTFILES="$HOME/.dotfiles"
    fi
fi

export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=50000 SAVEHIST=50000

# History options (essential only)
setopt EXTENDED_HISTORY HIST_IGNORE_ALL_DUPS HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS INC_APPEND_HISTORY SHARE_HISTORY

# Navigation and globbing
setopt AUTO_CD AUTO_PUSHD PUSHD_IGNORE_DUPS PUSHD_SILENT
setopt EXTENDED_GLOB GLOB_DOTS

# Other essentials
setopt INTERACTIVE_COMMENTS PROMPT_SUBST

# Environment
export EDITOR="${EDITOR:-nvim}" VISUAL="$EDITOR" PAGER="${PAGER:-less}"
export LESS='-R -i -w -M -z-4' LESSHISTFILE=/dev/null
export LANG="${LANG:-en_US.UTF-8}" LC_ALL="${LC_ALL:-en_US.UTF-8}"

# Path configuration
typeset -U path PATH
path=(
    "$HOME/.local/bin"
    "$HOME/bin"
    "$DOTFILES/bin"
    "$HOME/.cargo/bin"
    $path
)

# Add brew paths if they exist
for brew_path in "/opt/homebrew/bin" "/usr/local/bin"; do
    [[ -d "$brew_path" ]] && path=("$brew_path" $path)
done

# Load configuration modules
load_config() {
    local config_path="$DOTFILES/config/zsh/$1"
    [[ -r "$config_path" ]] && source "$config_path"
}

# Load core modules (always needed)
for module in exports aliases functions go-dev dev-automation; do
    load_config "$module"
done

# Load user customizations
load_config "personal-aliases"
load_config "personal-functions"

# Load optional modules (can be disabled)
[[ "$DOTFILES_SKIP_CROSS_PLATFORM" != "1" ]] && load_config "cross-platform"
[[ "$DOTFILES_SKIP_ENV_DETECTION" != "1" ]] && load_config "environment-detection"
[[ "$DOTFILES_SKIP_DIRENV" != "1" ]] && load_config "direnv-integration"
[[ "$DOTFILES_SKIP_HISTORY" != "1" ]] && load_config "intelligent-history"
[[ "$DOTFILES_SKIP_SECURITY" != "1" ]] && load_config "security-automation"
[[ "$DOTFILES_SKIP_PERFORMANCE" != "1" ]] && load_config "performance"
load_config "prompt"

# Load CLI tools and workflow automation
[[ -r "$DOTFILES/config/cli-tools/init" ]] && source "$DOTFILES/config/cli-tools/init"
[[ -r "$DOTFILES/config/workflow/init" ]] && source "$DOTFILES/config/workflow/init"

# Override any conflicting aliases with our functions (must be after CLI tools)
unalias cat 2>/dev/null || true

# Tool integrations (lazy load heavy ones)
command -v brew >/dev/null 2>&1 && eval "$(brew shellenv)"

# Note: Removed mise integration - using brew for tool management

# Lazy load fzf
if command -v fzf >/dev/null 2>&1; then
    fzf() {
        unfunction fzf
        eval "$(command fzf --zsh)"
        fzf "$@"
    }
fi

# Completion system (optimized)
autoload -Uz compinit
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# Essential completion options
setopt AUTO_MENU COMPLETE_IN_WORD MENU_COMPLETE

# Completion styles (minimal)
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache yes cache-path ~/.zsh/cache

# Key bindings
bindkey -e
bindkey '^R' history-incremental-search-backward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

# Debug output
[[ "$DOTFILES_DEBUG" == "true" ]] && zprof

# Personal/work configuration (not tracked by git)
load_config "personal.local"

# Local overrides
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# === ALIAS REMINDERS ===
[[ "$DOTFILES_SKIP_ALIAS_REMINDER" != "1" ]] && load_config "alias-reminder"
