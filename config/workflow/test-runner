#!/usr/bin/env bash
# Simple Test Runner
# Detects project type and runs appropriate tests

set -euo pipefail

# Source shared utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/utils"

# Run tests for current project
run_tests() {
    local dry_run="${1:-false}"
    local project_type
    project_type=$(detect_project_type)

    if [[ "$project_type" == "unknown" ]]; then
        log_warn "No supported project detected in current directory"
        log_info "Supported: Node.js, Python, Go, Rust, Make"
        return 1
    fi

    local test_cmd
    test_cmd=$(get_test_command "$project_type")

    if [[ -z "$test_cmd" ]]; then
        log_warn "No test command found for $project_type project"
        return 1
    fi

    if [[ "$dry_run" == "true" ]]; then
        log_info "[DRY RUN] Would run tests for $project_type project: $test_cmd"
    else
        log_info "Running tests for $project_type project: $test_cmd"
        eval "$test_cmd"
    fi
}

# Show available test info
show_info() {
    local project_type
    project_type=$(detect_project_type)

    echo "Test Runner Information"
    echo "======================"
    echo "Project type: $project_type"

    if [[ "$project_type" == "unknown" ]]; then
        echo "No supported project detected"
        echo ""
        echo "Supported project types:"
        echo "  • Node.js (package.json with test script)"
        echo "  • Python (pytest, unittest)"
        echo "  • Go (go test)"
        echo "  • Rust (cargo test)"
        echo "  • Make (make test)"
        return 1
    fi

    local test_cmd
    test_cmd=$(get_test_command "$project_type")

    if [[ -n "$test_cmd" ]]; then
        echo "Test command: $test_cmd"
    else
        echo "No test command available"
    fi
}

# Usage information
usage() {
    cat <<EOF
Simple Test Runner

USAGE:
    test-runner [OPTIONS]

OPTIONS:
    -n, --dry-run   Show what would be run without executing
    -i, --info      Show project info and available test command
    -h, --help      Show this help message

EXAMPLES:
    test-runner     # Run tests for current project
    test-runner -n  # Show what would be run (dry run)
    test-runner -i  # Show project info

SUPPORTED PROJECTS:
    • Node.js (package.json with "test" script)
    • Python (pytest or unittest)
    • Go (go test)
    • Rust (cargo test)
    • Make (make test target)
EOF
}

# Main function
main() {
    case "${1:-}" in
        -n|--dry-run)
            run_tests true
            ;;
        -i|--info)
            show_info
            ;;
        -h|--help)
            usage
            ;;
        "")
            run_tests false
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
}

# Only run main if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi