#!/usr/bin/env bash
# Shared Workflow Utilities
# Common functions for project detection and simple operations

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { printf "${BLUE}ℹ %s${NC}\\n" "$*" >&2; }
log_success() { printf "${GREEN}✓ %s${NC}\\n" "$*" >&2; }
log_warn() { printf "${YELLOW}⚠ %s${NC}\\n" "$*" >&2; }
log_error() { printf "${RED}✗ %s${NC}\\n" "$*" >&2; }

# Detect primary project type (single source of truth)
detect_project_type() {
    if [[ -f "package.json" ]]; then
        echo "nodejs"
    elif [[ -f "pyproject.toml" ]] || [[ -f "requirements.txt" ]] || [[ -f "setup.py" ]]; then
        echo "python"
    elif [[ -f "go.mod" ]]; then
        echo "go"
    elif [[ -f "Cargo.toml" ]]; then
        echo "rust"
    elif [[ -f "index.html" ]]; then
        echo "static"
    elif [[ -f "Makefile" ]]; then
        echo "make"
    else
        echo "unknown"
    fi
}

# Get test command for project type
get_test_command() {
    local project_type="${1:-$(detect_project_type)}"

    case "$project_type" in
        nodejs)
            if grep -q '"test"' package.json 2>/dev/null; then
                echo "npm test"
            else
                echo ""
            fi
            ;;
        python)
            if command -v pytest >/dev/null 2>&1 || [[ -f "pytest.ini" ]]; then
                echo "pytest"
            else
                echo "python -m unittest discover"
            fi
            ;;
        go)
            echo "go test ./..."
            ;;
        rust)
            echo "cargo test"
            ;;
        make)
            if grep -q "^test:" Makefile 2>/dev/null; then
                echo "make test"
            else
                echo ""
            fi
            ;;
        *)
            echo ""
            ;;
    esac
}

# Get dev server command for project type
get_dev_command() {
    local project_type="${1:-$(detect_project_type)}"

    case "$project_type" in
        nodejs)
            if grep -q '"dev"' package.json 2>/dev/null; then
                echo "npm run dev"
            elif grep -q '"start"' package.json 2>/dev/null; then
                echo "npm start"
            else
                echo ""
            fi
            ;;
        python)
            if [[ -f "manage.py" ]]; then
                echo "python manage.py runserver"
            elif [[ -f "app.py" ]]; then
                echo "python app.py"
            elif [[ -f "main.py" ]]; then
                echo "python main.py"
            else
                echo ""
            fi
            ;;
        go)
            echo "go run ."
            ;;
        rust)
            echo "cargo run"
            ;;
        static)
            echo "python -m http.server 8000"
            ;;
        make)
            if grep -q "^dev:" Makefile 2>/dev/null; then
                echo "make dev"
            elif grep -q "^serve:" Makefile 2>/dev/null; then
                echo "make serve"
            else
                echo ""
            fi
            ;;
        *)
            echo ""
            ;;
    esac
}

# Check if command exists
has_command() {
    command -v "$1" >/dev/null 2>&1
}

# Simple project info
project_info() {
    local type
    type=$(detect_project_type)
    echo "Project type: $type"

    local test_cmd
    test_cmd=$(get_test_command "$type")
    if [[ -n "$test_cmd" ]]; then
        echo "Test command: $test_cmd"
    fi

    local dev_cmd
    dev_cmd=$(get_dev_command "$type")
    if [[ -n "$dev_cmd" ]]; then
        echo "Dev command: $dev_cmd"
    fi
}
