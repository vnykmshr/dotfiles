#!/usr/bin/env bash
# Git Helpers - Clean Version

set -euo pipefail
source "$(dirname "${BASH_SOURCE[0]}")/utils"

# Quick save workflow
quick_save() {
    git rev-parse --git-dir >/dev/null 2>&1 || { echo "Not a git repo" >&2; exit 1; }

    # Add all changes
    git add .

    # Commit with message
    if [[ $# -gt 0 ]]; then
        git commit -m "$*"
    else
        read -p "Commit message: " message
        [[ -n "$message" ]] && git commit -m "$message" || { echo "Empty message, aborting" >&2; exit 1; }
    fi

    # Push if remote exists
    if git remote >/dev/null 2>&1; then
        git push
        echo "✓ Changes saved and pushed"
    else
        echo "✓ Changes committed (no remote)"
    fi
}

# Smart commit - generate message from changes
smart_commit() {
    git rev-parse --git-dir >/dev/null 2>&1 || { echo "Not a git repo" >&2; exit 1; }

    local files=$(git diff --cached --name-only)
    [[ -z "$files" ]] && git add . && files=$(git diff --cached --name-only)
    [[ -z "$files" ]] && { echo "No changes to commit" >&2; exit 1; }

    # Generate simple commit message
    local count=$(echo "$files" | wc -l)
    local message
    if [[ $count -eq 1 ]]; then
        message="Update $(basename "$files")"
    else
        message="Update $count files"
    fi

    git commit -m "$message"
    echo "✓ Committed: $message"

    # Push if remote exists
    git remote >/dev/null 2>&1 && git push && echo "✓ Pushed to remote"
}

# Quick status with enhanced info
status() {
    git rev-parse --git-dir >/dev/null 2>&1 || { echo "Not a git repo" >&2; exit 1; }

    echo "Repository: $(basename $(pwd))"
    echo "Branch: $(git branch --show-current)"

    # Show changes
    local status_output=$(git status --porcelain)
    if [[ -n "$status_output" ]]; then
        echo "Changes:"
        echo "$status_output" | head -10
        [[ $(echo "$status_output" | wc -l) -gt 10 ]] && echo "... and more"
    else
        echo "Working tree clean"
    fi

    # Show remote status
    if git remote >/dev/null 2>&1; then
        local ahead=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo "0")
        local behind=$(git rev-list --count HEAD..@{u} 2>/dev/null || echo "0")
        [[ "$ahead" != "0" ]] && echo "Ahead: $ahead commits"
        [[ "$behind" != "0" ]] && echo "Behind: $behind commits"
    fi
}

# Main function
main() {
    case "${1:-}" in
        save|s) shift; quick_save "$@" ;;
        smart|sc) smart_commit ;;
        status|st) status ;;
        *)
            echo "Usage: $0 <command>"
            echo "Commands:"
            echo "  save [message]  - Add, commit, and push changes"
            echo "  smart          - Commit with auto-generated message"
            echo "  status         - Enhanced git status"
            exit 1
            ;;
    esac
}

main "$@"